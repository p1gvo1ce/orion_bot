import os
import json
from tkinter.scrolledtext import example

import discord
import random
import asyncio
from datetime import datetime, timedelta
import random
import string

from Modules.db_control import read_from_guild_settings_db, write_to_buttons_db, read_member_data_from_db
from Modules.text_channels_control import add_game_in_game_roles_channel
from utils import clean_channel_id, get_bot, is_game_valid, get_logger
from Modules.phrases import get_phrase
from Modules.buttons import JoinButton, VoiceChannelCcontrol
from Modules.gpt_call import gpt_call

temp_channels_path = os.path.join("Data", "temp_channels.json")

bot = get_bot()
logger = get_logger()

def validate_gpt_response(data: dict) -> bool:
    return (
        isinstance(data, dict) and
        "is_allowed" in data and isinstance(data["is_allowed"], bool) and
        "new_name" in data and isinstance(data["new_name"], str) and
        "user_message" in data and isinstance(data["user_message"], str)
    )

def load_temp_channels():
    if os.path.exists(temp_channels_path):
        with open(temp_channels_path, "r") as f:
            return json.load(f)
    return {}

def save_temp_channels(temp_channels):
    os.makedirs(os.path.dirname(temp_channels_path), exist_ok=True)
    with open(temp_channels_path, "w") as f:
        json.dump(temp_channels, f, indent=4)


async def check_and_remove_nonexistent_channels():
    temp_channels = load_temp_channels()

    for channel_id, channel_info in list(temp_channels.items()):
        guild_id = channel_info['guild_id']
        guild = bot.get_guild(guild_id)

        if guild is not None:
            channel = guild.get_channel(int(channel_id))

            if channel is None:
                del temp_channels[channel_id]

    save_temp_channels(temp_channels)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ü–ª–∞–Ω –ë)
async def use_reserved_channel(bot, guild, visible_category, new_channel_name, overwrites, member):
    update_logs = {}
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (ID: 1353976761234362369)
    reserved_category = guild.get_channel(1353976761234362369)
    if not reserved_category:
        reserved_category = await guild.create_category(
            "Reserved Channels",
            overwrites={guild.default_role: discord.PermissionOverwrite(view_channel=False)}
        )
    # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    reserved_channel = None
    for channel in guild.channels:
        if channel.category_id == reserved_category.id and isinstance(channel, discord.VoiceChannel):
            reserved_channel = channel
            break
    if not reserved_channel:
        reserved_channel = await guild.create_voice_channel(
            "ReservedChannel",
            category=reserved_category,
            overwrites=overwrites
        )
    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_logs['update_start'] = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')
    try:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–Ω–∞–ª –≤ –≤–∏–¥–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await reserved_channel.edit(category=visible_category)
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await reserved_channel.edit(sync_permissions=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞
        await reserved_channel.edit(name=new_channel_name)
        # –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        current_overwrites = visible_category.overwrites.copy()
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (member) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
        current_overwrites[member] = discord.PermissionOverwrite(
            manage_channels=True,
            mute_members=True,
            deafen_members=True,
            move_members=True,
            manage_permissions=True
        )
        await reserved_channel.edit(overwrites=current_overwrites)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:", e)
    update_logs['update_end'] = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
    try:
        await member.move_to(reserved_channel)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª:", e)
    update_logs['moved_reserved'] = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')
    update_interval = (datetime.strptime(update_logs['update_end'], '%Y-%m-%d %H:%M:%S.%f') -
                       datetime.strptime(update_logs['update_start'], '%Y-%m-%d %H:%M:%S.%f')).total_seconds()
    return reserved_channel, update_interval, update_logs

# –ï—Å–ª–∏ –ø–æ –ø–ª–∞–Ω—É A –≤–¥—Ä—É–≥ –∫–∞–Ω–∞–ª –ø–æ—è–≤–∏—Ç—Å—è ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –ª–∏—à–Ω–∏–µ
async def cleanup_plan_a_channel(guild, visible_category, new_channel_name, fallback_channel):
    await asyncio.sleep(10)  # –¥–∞—ë–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–ª–∞–Ω A –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –∏ —Å–æ–∑–¥–∞–ª—Å—è, —É—Å–ø–µ–ª –ø–æ—è–≤–∏—Ç—å—Å—è
    for channel in guild.channels:
        if channel.category_id == visible_category.id and channel.name == new_channel_name:
            if channel.id != fallback_channel.id:
                try:
                    await channel.delete()
                    print(f"[CLEANUP] –£–¥–∞–ª—ë–Ω –ª–∏—à–Ω–∏–π –∫–∞–Ω–∞–ª {channel.id}")
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞:", e)

TESTING = False  # –£—Å—Ç–∞–Ω–æ–≤–∏ True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±–∞ –ø–ª–∞–Ω–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
TEST_PLAN_TOGGLE = 0  # –ë—É–¥–µ—Ç —á–µ—Ä–µ–¥–æ–≤–∞—Ç—å—Å—è: —á–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ -> –ø–ª–∞–Ω A, –Ω–µ—á–µ—Ç–Ω–æ–µ -> –ø–ª–∞–Ω B


CACHE_FILE = 'channel_name_cache.json'

async def voice_name_moderation(before: discord.abc.GuildChannel, after: discord.abc.GuildChannel):

    print("voice moderation call")
    if not isinstance(after, discord.VoiceChannel):
        return
    print("voice moderation start")
    channel_name = after.name

    # üîÑ –í—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—ç—à —Å –¥–∏—Å–∫–∞
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, 'r', encoding='utf-8') as f:
                channel_name_cache = json.load(f)
        except json.JSONDecodeError:
            print("‚ö†Ô∏è –§–∞–π–ª –∫—ç—à–∞ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ.")
            channel_name_cache = {}
    else:
        channel_name_cache = {}
        with open(CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(channel_name_cache, f, ensure_ascii=False, indent=2)

    # üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if channel_name in channel_name_cache:
        response = channel_name_cache[channel_name]
    else:

        examples = """
 {
  "is_allowed": false,
  "new_name": "–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞",
  "user_message": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É –∏ –º–æ–∂–µ—Ç –æ—Å–∫–æ—Ä–±–∏—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –µ–≥–æ –Ω–∞ –±–æ–ª–µ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
}

–ò–ª–∏ –µ—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ:

{
  "is_allowed": true,
  "new_name": "",
  "user_message": ""
}       
        """
        prompt = (f"""
–ü—Ä–æ–≤–µ—Ä—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∞–≤–∏–ª–∞–º.
–ù–∞–∑–≤–∞–Ω–∏–µ: '{channel_name}'. –ï—Å–ª–∏ –æ–Ω–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ (–æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ, —Ç–æ–∫—Å–∏—á–Ω–æ–µ, —Ç—Ä–æ–ª–ª–∏–Ω–≥, –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞, –ø–æ–ª–∏—Ç–∏–∫–∞, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è –∏ —Ç.–¥.), –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—á–µ–º—É –∏–∑–º–µ–Ω–µ–Ω–æ.
–í–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –æ–±—â–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤! —Å–∞–º–æ –ø–æ —Å–µ–±–µ —Å–ª–æ–≤–æ "master" –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–Ω–µ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –¢–æ, —á—Ç–æ –≤—ã—à–µ –º–æ–¥–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ –∏ –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö.
–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ —Ü–µ–Ω–∑—É—Ä–∏—Ç—å —Å–º—ã—Å–ª, –∞ –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã discord —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è —Å–µ—Ä–≤–µ—Ä –≤ discord –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º–∏ —Å–ª–æ–≤–∞ –∏ –∑–∞–º–µ–Ω—É —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞ –ª—é–±—ã—Ö —è–∑—ã–∫–∞—Ö, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–≥–∏–±–æ–≤.

---
–ß—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ:
üîû NSFW / –°–µ–∫—Å-–∫–æ–Ω—Ç–µ–Ω—Ç (blacklist)

cum, cock, pussy, tits, boobs, anal, nude, nudes, orgasm, masturbate, masturbation, blowjob, fuck, fisting,
dildo, cumdumpster, cumslut, gangbang, orgy, pegging, rimming, jerkoff, deepthroat, handjob, porn, hentai,
futa, yiff, yaoi, yuri, bondage, bdsm, sextoy, creampie, breeding, stepbro, stepsis, hotwife, camgirl,
onlyfans, escort, hooker, whore, slut, milf, sugarbaby, sugardaddy, nipples, moan, suck, lick, rimjob,
gape, squirting, wetdream, cuck, cuckold, thot, lewd, horny, dildo, vibrator

üíâ –ù–∞—Ä–∫–æ—Ç–∏–∫–∏ / –°–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ / –°—É–∏—Ü–∏–¥ (blacklist)

heroin, meth, cocaine, lsd, crack, ketamine, xanax, molly, mdma, acid, trip, overdose, selfharm,
cutting, suicide, kys, killmyself, diealone, unalive, rope, exitbag, bleedout, depression, anorexia,
bulimia, od, downers, uppers, fentanyl, opiates

üß† –•–µ–π—Ç-—Å–ø–∏—á –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å (blacklist)

nazi, hitler, kkk, faggot, retard, coon, tranny, nigger, niggers, spic, dyke, gook, chink, fag,
rape, rapist, lynch, slut, whore, pedo, pedophile, molester, childrapist, incel, killallmen,
misogynist, neckbeard, schoolshooter

üí• –ù–∞—Å–∏–ª–∏–µ, —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º (blacklist)

bomb, shooting, schoolshooting, beheading, massacre, kill, murder, stab, shot, terrorism,
terrorist, genocide, isis, alqaeda, jihad, explode, gun, ar15, bloodbath, throatcut

üé∞ –ê–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã –∏ "–≤–∑—Ä–æ—Å–ª—ã–µ —Å–µ—Ä–≤–∏—Å—ã" (graylist / audit-trigger)

casino, gambling, poker, betting, lootbox, gacha, roulette, porn, camgirl, onlyfans, sugarbaby,
escort, adultwork, premiumsnap, chaturbate, cammodel

üß™ –°–µ—Ä—ã–π —Å–ø–∏—Å–æ–∫ (graylist) ‚Äî –º–µ–º—ã, —ç–≤—Ñ–µ–º–∏–∑–º—ã, ‚Äú–ø–æ–≥—Ä–∞–Ω–∏—á–∫–∞‚Äù

simp, trap, breedable, bussy, thicc, daddy, dom, sub, yandere, loli, shota, uwu, owo, stepmom,
feet, toes, moaning, milkers, breed, spank, cream, tight, gagged, gagging, sugarbaby, pegging,
licking, wet, choke, feetpics, footfetish, ddlg, ddlb, nsfw, erp, rpsex, lewd, coom, nut, goo

‚ö†Ô∏è –û–±—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:

slave, master, grooming, domination, abuse, submission, daddy, mommy, uncle, hole, meat,
ride, cream, stroke, grind, service, punishment, chains, leash, latex, collar, whip
---
–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: is_allowed (bool), new_name (str), user_message (str).


–í–æ—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω:

{examples}

---

–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º—ã—Å–ª/–º–µ–º/—à—É—Ç–∫–∏/–∏—Ä–æ–Ω–∏–∏.
–°—É—Ç—å –ø–æ—à–ª–æ—Å—Ç–∏/–∞–≥—Ä–µ—Å—Å–∏–∏/—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å, –Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ. –°—É—Ç—å –∏ —Å–º—ã—Å–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –¥–∏—Å–∫–æ—Ä–¥—É –Ω–µ –∫ —á–µ–º—É –ø—Ä–∏–¥—Ä–∞—Ç—å—Å—è.

–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –ù—É–∂–Ω–æ –Ω–µ –Ω–∞—Ä—É—à–∞—è –ø—Ä–∞–≤–∏–ª –æ–±—ä—è—Å–Ω–∏—Ç—å —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç (—Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏) –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ—á–µ–º—É —Ç–∞–∫ –ø–∏—Å–∞—Ç—å –Ω–µ–ª—å–∑—è, –ø–æ—á–µ–º—É –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—É—á—à–µ –∏ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º –∏–∑–±–µ–≥–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π.
–ù—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, —á—Ç–æ –Ω–µ–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Ä–µ–¥—è—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ "Safe Space" –≤–æ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, —Å–æ—Å–ª–∞–≤—à–∏—Å—å –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤ Discord, –∞ —Ç–∞–∫ –∂–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —Å–≤–æ—é –¥–æ—Å–∞–¥—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–π —Ü–µ–Ω–∑—É—Ä—ã.
---
–ù–∞–∑–≤–∞–Ω–∏–µ: '{channel_name}'

            """
        )
        response = ""
        for i in range(10):
            response_raw = await gpt_call(prompt, role="moderator")

            if isinstance(response_raw, str):
                try:
                    response = json.loads(response_raw)
                except json.JSONDecodeError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print("üì® –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏:")
                    print(response_raw)
                    continue
            else:
                print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞. –¢–∏–ø:", type(response_raw))
                continue

            if not isinstance(response, dict):
                print("‚ùå –û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî –Ω–µ —Å–ª–æ–≤–∞—Ä—å. –¢–∏–ø:", type(response))
                print("üîç Parsed value:", response)
                continue

            # üíæ –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            channel_name_cache[channel_name] = response
            with open(CACHE_FILE, 'w', encoding='utf-8') as f:
                json.dump(channel_name_cache, f, ensure_ascii=False, indent=2)
            break
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫")
            return  # <- –∏–ª–∏ fallback

    # üîß –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    if not response.get("is_allowed", True):
        new_name = response["new_name"]
        user_message = response["user_message"]

        try:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
            await after.edit(name=new_name)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            mentions = " ".join(member.mention for member in after.members)

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
            text_channel = after.guild.get_channel(after.id)  # –µ—Å–ª–∏ id = id —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ
            # –ò–ª–∏: text_channel = after.channel.linked_channel  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª Discord'–∞

            if text_channel and text_channel.permissions_for(text_channel.guild.me).send_messages:
                await text_channel.send(
                    f"üîá –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ `{channel_name}` –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ `{new_name}`.\n"
                    f"{user_message}\n\n{mentions}"
                )
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.")

        except discord.Forbidden:
            print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

async def channel_create_name_moderation(channel):
    await voice_name_moderation(None, channel)


async def find_party_controller(member, before, after):

    global TESTING, TEST_PLAN_TOGGLE
    logger = get_logger()
    connection_time = datetime.utcnow()
    logger.info(
        f"[START] [{connection_time.strftime('%Y-%m-%d %H:%M:%S.%f')}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.id}")

    channel_name = member.nick if member.nick else member.name

    if before.channel and before.channel != after.channel:
        logger.info(
            f"[LEAVE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.id} –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª {before.channel.id} –≤ {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')}, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ find-—Å–æ–æ–±—â–µ–Ω–∏—è.")
        await find_message_delete(before.channel.guild, member)
        temp_channels = load_temp_channels()
        if str(before.channel.id) in temp_channels:
            if len(before.channel.members) == 0:
                logger.info(
                    f"[CLEANUP] –ö–∞–Ω–∞–ª {before.channel.id} –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ –≤ {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')}.")
                await before.channel.delete()
                del temp_channels[str(before.channel.id)]
                save_temp_channels(temp_channels)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
    creation_start = None
    creation_end = None
    movement_start = None
    movement_end = None
    movement_interval = 0
    creation_interval = 0
    plan_used = None

    if after.channel and after.channel != before.channel:
        connection_time = datetime.utcnow()
        logger.info(
            f"[CONNECT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É {after.channel.id} –≤ {connection_time.strftime('%Y-%m-%d %H:%M:%S.%f')}")
        guild_id = member.guild.id
        guild = member.guild
        voice_channel_id = after.channel.id

        search_voice_channel_ids = await read_from_guild_settings_db(guild_id, "party_find_voice_channel_id")
        search_voice_channel_ids = [clean_channel_id(id_str) for id_str in search_voice_channel_ids]

        if voice_channel_id in search_voice_channel_ids:
            member_data = await read_member_data_from_db(member, 'voice_channel_name')
            if member_data:
                channel_name = member_data['data']
            if len(channel_name) > 100:
                channel_name = channel_name[:100]

            max_bitrate = after.channel.guild.bitrate_limit
            logger.info(
                f"[CREATE] –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —Å –∏–º–µ–Ω–µ–º '{channel_name}' –∏ –±–∏—Ç—Ä–µ–π—Ç–æ–º {max_bitrate} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.id} –≤ {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')}")
            creation_start = datetime.utcnow()
            plan_used = None
            new_channel = None
            creation_interval = None
            plan_logs = {}

            global TESTING, TEST_PLAN_TOGGLE
            if TESTING:
                forced_plan = "A" if (TEST_PLAN_TOGGLE % 2 == 0) else "B"
                TEST_PLAN_TOGGLE += 1
            else:
                forced_plan = None

            if forced_plan == "A" or (forced_plan is None):
                try:
                    new_channel = await asyncio.wait_for(
                        guild.create_voice_channel(
                            channel_name,
                            bitrate=max_bitrate,
                            category=after.channel.category
                        ),
                        timeout=2
                    )
                    creation_end = datetime.utcnow()
                    creation_interval = (creation_end - creation_start).total_seconds()
                    plan_used = "A"
                    logger.info(
                        f"[PLAN A] –ö–∞–Ω–∞–ª {new_channel.id} —Å–æ–∑–¥–∞–Ω –≤ {creation_end.strftime('%Y-%m-%d %H:%M:%S.%f')} –∑–∞ {creation_interval:.3f} —Å–µ–∫—É–Ω–¥.")
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    try:
                        await new_channel.edit(sync_permissions=True)
                        # –ë–µ—Ä–µ–º –ø—Ä–∞–≤–∞ –∏–∑ –≤–∏–¥–∏–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        visible_category = after.channel.category
                        base_overwrites = visible_category.overwrites.copy() if visible_category.overwrites else {}
                        base_overwrites.update({
                            member: discord.PermissionOverwrite(
                                manage_channels=True,
                                mute_members=True,
                                deafen_members=True,
                                move_members=True,
                                manage_permissions=True
                            )
                        })
                        await new_channel.edit(overwrites=base_overwrites)
                        logger.info(f"[PLAN A] –ü—Ä–∞–≤–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {new_channel.id}.")
                    except Exception as e:
                        logger.info(f"[PLAN A] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")
                except asyncio.TimeoutError:
                    creation_end = datetime.utcnow()
                    creation_interval = (creation_end - creation_start).total_seconds()
                    plan_used = "B"
                    logger.info(
                        f"[PLAN A Timeout] –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã –≤ {creation_end.strftime('%Y-%m-%d %H:%M:%S.%f')}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–ª–∞–Ω B.")
                except Exception as e:
                    creation_end = datetime.utcnow()
                    creation_interval = (creation_end - creation_start).total_seconds()
                    plan_used = "Error"
                    logger.info(
                        f"[PLAN A Error] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e} –≤ {creation_end.strftime('%Y-%m-%d %H:%M:%S.%f')}")

            if plan_used == "B" or forced_plan == "B":
                fallback_trigger_time = datetime.utcnow()
                logger.info(
                    f"[PLAN B] –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∞ B –≤ {fallback_trigger_time.strftime('%Y-%m-%d %H:%M:%S.%f')}")
                overwrites = {
                    guild.default_role: discord.PermissionOverwrite(view_channel=False),
                    guild.get_role(923183831094284318): discord.PermissionOverwrite(view_channel=True)
                }
                new_channel, fallback_interval, plan_b_logs = await use_reserved_channel(bot, guild,
                                                                                         after.channel.category,
                                                                                         channel_name, overwrites,
                                                                                         member)
                creation_end = datetime.utcnow()
                creation_interval = fallback_interval
                plan_logs.update(plan_b_logs)
                plan_used = "B"
                logger.info(f"[PLAN B] –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª {new_channel.id} –æ–±–Ω–æ–≤–ª–µ–Ω, –¥–∞–Ω–Ω—ã–µ: {plan_b_logs}")
                asyncio.create_task(cleanup_plan_a_channel(guild, after.channel.category, channel_name, new_channel))

            if new_channel is None:
                logger.info(f"[ERROR] new_channel –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.id}")
                return

            temp_channels = load_temp_channels()
            temp_channels[str(new_channel.id)] = {"guild_id": guild_id}
            save_temp_channels(temp_channels)

            movement_start = datetime.utcnow()
            if member.voice and member.voice.channel:
                logger.info(
                    f"[MOVE] –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.id} –≤ –∫–∞–Ω–∞–ª {new_channel.id} –≤ {movement_start.strftime('%Y-%m-%d %H:%M:%S.%f')}.")
                try:
                    await member.move_to(new_channel)
                except Exception as e:
                    logger.info(f"[MOVE ERROR] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
            movement_end = datetime.utcnow()
            movement_interval = (movement_end - movement_start).total_seconds()

            button_data = {
                "voice_id": f"id_{new_channel.id}",
                "creator_id": f"id_{member.id}"
            }
            logger.info(
                f"[BUTTON] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ {new_channel.id} –≤ {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')}.")
            control_message = await new_channel.send(await get_phrase("Channel Management", guild_id))
            logger.info(
                f"[BUTTON] –°–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è {control_message.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')}.")
            await write_to_buttons_db(guild.id, control_message.id, "VoiceChannelControl", button_data, member.id)
            voice_button_view = VoiceChannelCcontrol(guild_id, member.id, new_channel.id)
            await voice_button_view.initialize_buttons()
            await control_message.edit(view=voice_button_view)

            member_data = await read_member_data_from_db(member, 'party_find_mode')
            if member_data and member_data.get('data') == 'off':
                logger.info(f"[MODE] –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.id}.")
            else:
                for activity in member.activities:
                    if activity.type == discord.ActivityType.playing:
                        role_name = activity.name
                        role = discord.utils.get(after.channel.guild.roles, name=role_name)
                        is_valid_game = is_game_valid(activity.name)
                        if role is None and is_valid_game:
                            random_color = random.randint(0, 0xFFFFFF)
                            logger.info(
                                f"[ROLE] –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å '{role_name}' –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.id} —Å —Ü–≤–µ—Ç–æ–º {random_color}.")
                            role = await after.channel.guild.create_role(name=role_name,
                                                                         color=discord.Color(random_color))
                            await add_game_in_game_roles_channel(role, after.channel.guild)
                        if role not in member.roles and is_valid_game:
                            logger.info(f"[ROLE] –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å {role.id} —É—á–∞—Å—Ç–Ω–∏–∫—É {member.id}.")
                            await member.add_roles(role)
                if member.voice and member.voice.channel:
                    for activity in member.activities:
                        if activity.type == discord.ActivityType.playing:
                            search_text_channel_ids = await read_from_guild_settings_db(guild_id,
                                                                                        "party_find_text_channel_id")
                            search_text_channel_ids = [clean_channel_id(id_str) for id_str in search_text_channel_ids]
                            logger.info(
                                f"[INVITE] –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {new_channel.id} –≤ {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')}.")
                            invite = await new_channel.create_invite(max_age=3600, max_uses=99)
                            for text_channel_id in search_text_channel_ids:
                                text_channel = member.guild.get_channel(text_channel_id)
                                if text_channel:
                                    find_message = await text_channel.send(
                                        content=f"{member.mention} {await get_phrase('looking for a company', guild)} {new_channel.mention}.\n## <@&{role.id}>"
                                    )
                                    invite_data = {"invite": invite.url}
                                    logger.info(
                                        f"[INVITE] –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {find_message.id} –≤ –∫–∞–Ω–∞–ª–µ {text_channel.id} –≤ {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')}.")
                                    await write_to_buttons_db(guild.id, find_message.id, "JoinButton", invite_data,
                                                              member.id)
                                    join_button_view = JoinButton(invite, guild_id, activity, member.id)
                                    await join_button_view.initialize_buttons()
                                    await find_message.edit(view=join_button_view)
                                    break
                            asyncio.create_task(check_member_in_channel(member, new_channel, find_message, invite))
    logger.info(
        f"[END] –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.id} –≤ {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')}")

    # –í –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º embed, –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É:
    if plan_used is None or new_channel is None:
        # –ó–Ω–∞—á–∏—Ç, –º—ã –Ω–µ –¥–µ–ª–∞–ª–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É embed, —Ç.–∫. –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞.")
        return

    total_interval = 0
    if creation_start is not None and creation_end is not None:
        total_interval += (creation_end - creation_start).total_seconds()
    total_interval += movement_interval

    if total_interval >= 5:
        embed_color = "#8B0000"
    elif total_interval <= 1:
        embed_color = "#00FF7F"
    else:
        embed_color = "#20B2AA"

    report_embed = discord.Embed(title="Private Voice Update Report", color=discord.Color.from_str(embed_color))
    report_embed.add_field(name="–ü–ª–∞–Ω", value=f"–ü–ª–∞–Ω {plan_used}", inline=False)
    report_embed.add_field(name="–í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", value=connection_time.strftime('%Y-%m-%d %H:%M:%S.%f'),
                           inline=False)
    report_embed.add_field(name="–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è",
                           value=creation_start.strftime('%Y-%m-%d %H:%M:%S.%f') if creation_start else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                           inline=False)
    report_embed.add_field(name="–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                           value=creation_end.strftime('%Y-%m-%d %H:%M:%S.%f') if creation_end else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                           inline=False)
    report_embed.add_field(name="–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                           value=f"{creation_interval:.3f} —Å–µ–∫—É–Ω–¥" if creation_interval is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                           inline=False)
    report_embed.add_field(name="–í—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è",
                           value=movement_end.strftime('%Y-%m-%d %H:%M:%S.%f') if movement_end else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                           inline=False)
    report_embed.add_field(name="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è", value=f"{movement_interval:.3f} —Å–µ–∫—É–Ω–¥", inline=False)
    report_embed.add_field(name="–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è (—Å–æ–∑–¥–∞–Ω–∏–µ+–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ)", value=f"{total_interval:.3f} —Å–µ–∫—É–Ω–¥",
                           inline=False)
    if plan_used == "B":
        report_embed.add_field(name="–ü–ª–∞–Ω B: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", value=plan_logs.get('update_start', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                               inline=False)
        report_embed.add_field(name="–ü–ª–∞–Ω B: –û–∫–æ–Ω—á–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", value=plan_logs.get('update_end', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                               inline=False)
        report_embed.add_field(name="–ü–ª–∞–Ω B: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª",
                               value=plan_logs.get('moved_reserved', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'), inline=False)
    report_embed.timestamp = datetime.utcnow()

    report_channel = guild.get_channel(1353656805116477530)

    if report_channel:
        try:
            await report_channel.send(embed=report_embed)
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {e}")
    else:
        logger.info("–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")





async def find_message_delete(guild, member):
    try:
        search_text_channel_ids = await read_from_guild_settings_db(guild.id, "party_find_text_channel_id")
        search_text_channel_ids = [clean_channel_id(id_str) for id_str in search_text_channel_ids]

        current_voice_channel = member.voice.channel if member.voice else None

        for text_channel_id in search_text_channel_ids:
            text_channel = member.guild.get_channel(text_channel_id)
            if text_channel:
                async for message in text_channel.history(limit=20):
                    if str(member.id) in message.content:
                        if current_voice_channel and str(current_voice_channel.id) in message.content:
                            logger.debug("Channel mentioned in message, skipping delete")
                        else:
                            logger.debug("DELETE find message")
                            await message.delete()

    except discord.NotFound:
        pass


async def check_member_in_channel(member, temp_channel, find_message, invite):
    while True:
        await asyncio.sleep(30)

        if member not in temp_channel.members:
            await find_message_delete(temp_channel.guild, member)

            break